

INCLUDE(SetCacheOnOffEmpty)
INCLUDE(MultilineSet)
INCLUDE(AdvancedOption)
INCLUDE(AssertDefined)
INCLUDE(TribitsSortListAccordingToMasterList)


MACRO(TRIBITS_PROJECT_DEFINE_EXTRA_REPOSITORIES)
  ASSERT_DEFINED(PROJECT_NAME)
  IF ("${ARGN}" STREQUAL "")
    SET(${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY)
  ELSE()
    SET(${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY  "${ARGN}")
  ENDIF()
ENDMACRO()



SET(ERP_REPO_NAME_OFFSET 0)
SET(ERP_REPO_DIR_OFFSET 1)
SET(ERP_REPO_REPOTYPE_OFFSET 2)
SET(ERP_REPO_REPOURL_OFFSET 3)
SET(ERP_REPO_PACKSTAT_OFFSET 4)
SET(ERP_REPO_CLASSIFICATION_OFFSET 5)

SET(ERP_NUM_FIELDS_PER_REPO 6)

FUNCTION(TRIBITS_DUMP_EXTRA_REPOSITORIES_LIST)
  IF (${PROJECT_NAME}_VERBOSE_CONFIGURE)
    PRINT_VAR(${PROJECT_NAME}_EXTRA_REPOSITORIES_DEFAULT)
    PRINT_VAR(${PROJECT_NAME}_EXTRA_REPOSITORIES_DIRS)
    PRINT_VAR(${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOTYPES)
    PRINT_VAR(${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOURLS)
    PRINT_VAR(${PROJECT_NAME}_EXTRA_REPOSITORIES_PACKSTATS)
    PRINT_VAR(${PROJECT_NAME}_EXTRA_REPOSITORIES_CATEGORIES)
  ENDIF()
ENDFUNCTION()


MACRO(TRIBITS_PROCESS_EXTRAREPOS_LISTS)


  IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
    PRINT_VAR(${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY)
  ENDIF()
  ASSERT_DEFINED(${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY)
  LIST(LENGTH ${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY
    ${PROJECT_NAME}_NUM_EXTRAREPOS_AND_FIELDS )
  MATH(EXPR ${PROJECT_NAME}_NUM_EXTRAREPOS
    "${${PROJECT_NAME}_NUM_EXTRAREPOS_AND_FIELDS}/${ERP_NUM_FIELDS_PER_REPO}")
  IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
    PRINT_VAR(${PROJECT_NAME}_NUM_EXTRAREPOS)
  ENDIF()
  MATH(EXPR ${PROJECT_NAME}_LAST_EXTRAREPO_IDX "${${PROJECT_NAME}_NUM_EXTRAREPOS}-1")
  IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
    PRINT_VAR(${PROJECT_NAME}_LAST_EXTRAREPO_IDX)
  ENDIF()


  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_DEFAULT)
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_DIRS)
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOTYPES)
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOURLS)
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_PACKSTATS)
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_CATEGORIES)

  FOREACH(EXTRAREPO_IDX RANGE ${${PROJECT_NAME}_LAST_EXTRAREPO_IDX})


    MATH(EXPR EXTRAREPO_NAME_IDX
      "${EXTRAREPO_IDX}*${ERP_NUM_FIELDS_PER_REPO}+${ERP_REPO_NAME_OFFSET}")
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_NAME_IDX)
    ENDIF()
    LIST(GET ${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY
      ${EXTRAREPO_NAME_IDX} EXTRAREPO_NAME )
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_NAME)
    ENDIF()

    MATH(EXPR EXTRAREPO_DIR_IDX
      "${EXTRAREPO_IDX}*${ERP_NUM_FIELDS_PER_REPO}+${ERP_REPO_DIR_OFFSET}")
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_DIR_IDX)
    ENDIF()
    LIST(GET ${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY
      ${EXTRAREPO_DIR_IDX} EXTRAREPO_DIR )
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_DIR)
    ENDIF()
    IF (EXTRAREPO_DIR STREQUAL "")
      SET(EXTRAREPO_DIR ${EXTRAREPO_NAME})
    ENDIF()
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_DIR)
    ENDIF()

    MATH(EXPR EXTRAREPO_REPOTYPE_IDX
      "${EXTRAREPO_IDX}*${ERP_NUM_FIELDS_PER_REPO}+${ERP_REPO_REPOTYPE_OFFSET}")
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_REPOTYPE_IDX)
    ENDIF()
    LIST(GET ${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY
      ${EXTRAREPO_REPOTYPE_IDX} EXTRAREPO_REPOTYPE )
    IF (EXTRAREPO_REPOTYPE STREQUAL GIT
      OR EXTRAREPO_REPOTYPE STREQUAL SVN
      )
    ELSEIF(EXTRAREPO_REPOTYPE STREQUAL HG)
      MESSAGE(WARNING "Warning: the repo ${EXTRAREPO_NAME} is a Mercurial repo: these are tolerated, but not fully supported.")
    ELSE()
      MESSAGE(FATAL_ERROR "Error, the repo type of '${EXTRAREPO_REPOTYPE}' for"
        " extra repo ${EXTRAREPO_NAME} is *not* valid.  Valid choices are 'GIT', 'HG' and 'SVN'!")
    ENDIF()
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_REPOTYPE)
    ENDIF()

    MATH(EXPR EXTRAREPO_REPOURL_IDX
      "${EXTRAREPO_IDX}*${ERP_NUM_FIELDS_PER_REPO}+${ERP_REPO_REPOURL_OFFSET}")
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_REPOURL_IDX)
    ENDIF()
    LIST(GET ${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY
      ${EXTRAREPO_REPOURL_IDX} EXTRAREPO_REPOURL )
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_REPOURL)
    ENDIF()

    MATH(EXPR EXTRAREPO_PACKSTAT_IDX
      "${EXTRAREPO_IDX}*${ERP_NUM_FIELDS_PER_REPO}+${ERP_REPO_PACKSTAT_OFFSET}")
    LIST(GET ${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY
      ${EXTRAREPO_PACKSTAT_IDX} EXTRAREPO_PACKSTAT )
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_PACKSTAT)
    ENDIF()
    IF (EXTRAREPO_PACKSTAT STREQUAL "")
      SET(EXTRAREPO_PACKSTAT HASPACKAGES)
    ELSEIF(EXTRAREPO_PACKSTAT STREQUAL NOPACKAGES)
    ELSE()
      MESSAGE(FATAL_ERROR "Error, the PACKSTAT of '${EXTRAREPO_PACKSTAT}' for"
        " extra repo ${EXTRAREPO_NAME} is *not* valid.  Valid choices are '' and 'NOPACKAGES'!")
    ENDIF()
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_PACKSTAT)
    ENDIF()

    MATH(EXPR EXTRAREPO_CLASSIFICATION_IDX
      "${EXTRAREPO_IDX}*${ERP_NUM_FIELDS_PER_REPO}+${ERP_REPO_CLASSIFICATION_OFFSET}")
    LIST(GET ${PROJECT_NAME}_EXTRAREPOS_DIR_REPOTYPE_REPOURL_PACKSTAT_CATEGORY
      ${EXTRAREPO_CLASSIFICATION_IDX} EXTRAREPO_CLASSIFICATION )
    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(EXTRAREPO_CLASSIFICATION)
    ENDIF()


    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(${PROJECT_NAME}_ENABLE_KNOWN_EXTERNAL_REPOS_TYPE)
    ENDIF()

    SET(ADD_EXTRAREPO FALSE)

    IF (${PROJECT_NAME}_ENABLE_KNOWN_EXTERNAL_REPOS_TYPE STREQUAL "Continuous" AND
        EXTRAREPO_CLASSIFICATION STREQUAL "Continuous"
      )
      SET(ADD_EXTRAREPO TRUE)
    ELSEIF (${PROJECT_NAME}_ENABLE_KNOWN_EXTERNAL_REPOS_TYPE STREQUAL "Nightly" AND
        (EXTRAREPO_CLASSIFICATION STREQUAL "Continuous" OR EXTRAREPO_CLASSIFICATION STREQUAL "Nightly")
      )
      SET(ADD_EXTRAREPO TRUE)
    ENDIF()

    IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
      PRINT_VAR(ADD_EXTRAREPO)
    ENDIF()



    IF (ADD_EXTRAREPO)
      LIST(APPEND ${PROJECT_NAME}_EXTRA_REPOSITORIES_DEFAULT ${EXTRAREPO_NAME})
      LIST(APPEND ${PROJECT_NAME}_EXTRA_REPOSITORIES_DIRS ${EXTRAREPO_DIR})
      LIST(APPEND ${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOTYPES ${EXTRAREPO_REPOTYPE})
      LIST(APPEND ${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOURLS ${EXTRAREPO_REPOURL})
      LIST(APPEND ${PROJECT_NAME}_EXTRA_REPOSITORIES_PACKSTATS ${EXTRAREPO_PACKSTAT})
      LIST(APPEND ${PROJECT_NAME}_EXTRA_REPOSITORIES_CATEGORIES ${EXTRAREPO_CLASSIFICATION})
    ELSE()
      LIST(APPEND CPACK_SOURCE_IGNORE_FILES
        "${${PROJECT_NAME}_SOURCE_DIR}/${EXTRAREPO_DIR}/")
    ENDIF()

  ENDFOREACH()


  LIST(LENGTH ${PROJECT_NAME}_EXTRA_REPOSITORIES_DEFAULT ${PROJECT_NAME}_NUM_EXTRAREPOS )
  IF (TRIBITS_PROCESS_EXTRAREPOS_LISTS_DEBUG)
    PRINT_VAR(${PROJECT_NAME}_NUM_EXTRAREPOS)
  ENDIF()
  MATH(EXPR ${PROJECT_NAME}_LAST_EXTRAREPO_IDX "${${PROJECT_NAME}_NUM_EXTRAREPOS}-1")


  TRIBITS_DUMP_EXTRA_REPOSITORIES_LIST()

ENDMACRO()


FUNCTION(TRIBITS_EXTRA_REPOSITORIES_ASSERT_SUBSET_AND_ORDER_WRT_FILE)
  SET(EXTRA_REPOSITORIES_SORTED ${${PROJECT_NAME}_EXTRA_REPOSITORIES})
  TRIBITS_SORT_LIST_ACCORDING_TO_MASTER_LIST(
    "${${PROJECT_NAME}_EXTRA_REPOSITORIES_DEFAULT}" EXTRA_REPOSITORIES_SORTED)
  IF (NOT "${${PROJECT_NAME}_EXTRA_REPOSITORIES}" STREQUAL "${EXTRA_REPOSITORIES_SORTED}")
    MESSAGE(FATAL_ERROR
      "ERROR!  The list of extra repos passed in '${${PROJECT_NAME}_EXTRA_REPOSITORIES}'"
      " is not a subset and in the same order as read in from extra repos file '${${PROJECT_NAME}_EXTRA_REPOSITORIES_DEFAULT}'"
      )
  ENDIF()
ENDFUNCTION()


MACRO(TRIBITS_FILTER_OR_ASSERT_EXTRA_REPOS)



  SET(EXTRA_REPOSITORIES_TMP)
  SET(EXTRA_REPOSITORIES_DIRS_TMP)
  SET(EXTRA_REPOSITORIES_REPOTYPES_TMP)
  SET(EXTRA_REPOSITORIES_REPOURLS_TMP)
  SET(EXTRA_REPOSITORIES_PACKSTATS_TMP)
  SET(EXTRA_REPOSITORIES_CATEGORIES_TMP)

  LIST(LENGTH ${PROJECT_NAME}_EXTRA_REPOSITORIES EXTRA_REPOSITORIES_IN_LEN)
  SET(EXTRAREPO_IN_IDX 0)
  IF (EXTRA_REPOSITORIES_IN_LEN GREATER 0)
    LIST(GET ${PROJECT_NAME}_EXTRA_REPOSITORIES ${EXTRAREPO_IN_IDX} EXTRAREPO_IN)
  ENDIF()

  SET(EXTRAREPO_IDX 0)
  FOREACH(EXTRAREPO_NAME ${${PROJECT_NAME}_EXTRA_REPOSITORIES_DEFAULT})


    LIST(GET ${PROJECT_NAME}_EXTRA_REPOSITORIES_DIRS ${EXTRAREPO_IDX}
      EXTRAREPO_DIR )
    LIST(GET ${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOTYPES ${EXTRAREPO_IDX}
      EXTRAREPO_REPOTYPE )
    LIST(GET ${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOURLS ${EXTRAREPO_IDX}
      EXTRAREPO_REPOURL )
    LIST(GET ${PROJECT_NAME}_EXTRA_REPOSITORIES_PACKSTATS ${EXTRAREPO_IDX}
      EXTRAREPO_PACKSTAT )
    LIST(GET ${PROJECT_NAME}_EXTRA_REPOSITORIES_CATEGORIES ${EXTRAREPO_IDX}
      EXTRAREPO_CATEGORY )


    SET(ADD_EXTRAREPO TRUE)

    IF (EXTRA_REPOSITORIES_IN_LEN  GREATER  0)

      IF (EXTRAREPO_IN_IDX EQUAL EXTRA_REPOSITORIES_IN_LEN)
        SET(ADD_EXTRAREPO FALSE)
      ELSEIF (EXTRAREPO_IN STREQUAL EXTRAREPO_NAME)
        MATH(EXPR EXTRAREPO_IN_IDX "${EXTRAREPO_IN_IDX}+1")
        IF (EXTRAREPO_IN_IDX LESS EXTRA_REPOSITORIES_IN_LEN)
          LIST(GET ${PROJECT_NAME}_EXTRA_REPOSITORIES ${EXTRAREPO_IN_IDX} EXTRAREPO_IN)
        ELSE()
          SET(EXTRAREPO_IN  "")
        ENDIF()
      ELSE()
        SET(ADD_EXTRAREPO FALSE)
      ENDIF()
    ENDIF()


    IF (ADD_EXTRAREPO AND ${PROJECT_NAME}_CHECK_EXTRAREPOS_EXIST)

      ASSERT_DEFINED(PROJECT_SOURCE_DIR)
      SET(EXTRAREPO_SOURCE_DIR "${PROJECT_SOURCE_DIR}/${EXTRAREPO_DIR}")
      IF (EXISTS "${EXTRAREPO_SOURCE_DIR}")
        SET(EXTRAREPO_EXISTS TRUE)
      ELSE()
        SET(EXTRAREPO_EXISTS FALSE)
      ENDIF()

      IF (NOT EXTRAREPO_EXISTS)
        SET(ADD_EXTRAREPO FALSE)
        IF (${PROJECT_NAME}_IGNORE_MISSING_EXTRA_REPOSITORIES)
          MESSAGE("-- "
            "WARNING: Ignoring missing extra repo '${EXTRAREPO_NAME}'"
            " as requested since ${EXTRAREPO_SOURCE_DIR} does not exist" )
        ELSE()
          MESSAGE( FATAL_ERROR
            "ERROR!  Skipping missing extra repo '${EXTRAREPO_NAME}'"
            " since ${EXTRAREPO_SOURCE_DIR} does not exist!\n")
        ENDIF()
      ENDIF()

    ENDIF()


    IF (ADD_EXTRAREPO)
      MESSAGE("-- " "Adding extra ${EXTRAREPO_CATEGORY} repository ${EXTRAREPO_NAME} ...")
      LIST(APPEND EXTRA_REPOSITORIES_TMP ${EXTRAREPO_NAME})
      LIST(APPEND EXTRA_REPOSITORIES_DIRS_TMP ${EXTRAREPO_DIR})
      LIST(APPEND EXTRA_REPOSITORIES_REPOTYPES_TMP ${EXTRAREPO_REPOTYPE})
      LIST(APPEND EXTRA_REPOSITORIES_REPOURLS_TMP ${EXTRAREPO_REPOURL})
      LIST(APPEND EXTRA_REPOSITORIES_PACKSTATS_TMP ${EXTRAREPO_PACKSTAT})
      LIST(APPEND EXTRA_REPOSITORIES_CATEGORIES_TMP ${EXTRAREPO_CLASSIFICATION})
   ENDIF()

    MATH(EXPR EXTRAREPO_IDX "${EXTRAREPO_IDX}+1")

  ENDFOREACH()

  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES ${EXTRA_REPOSITORIES_TMP})
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_DIRS ${EXTRA_REPOSITORIES_DIRS_TMP})
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOTYPES ${EXTRA_REPOSITORIES_REPOTYPES_TMP})
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_REPOURLS ${EXTRA_REPOSITORIES_REPOURLS_TMP})
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_PACKSTATS ${EXTRA_REPOSITORIES_PACKSTATS_TMP})
  SET(${PROJECT_NAME}_EXTRA_REPOSITORIES_CATEGORIES ${EXTRA_REPOSITORIES_CATEGORIES_TMP})

  TRIBITS_DUMP_EXTRA_REPOSITORIES_LIST()

ENDMACRO()


MACRO(TRIBITS_GET_AND_PROCESS_EXTRA_REPOSITORIES_LISTS)


  IF (${PROJECT_NAME}_EXTRAREPOS_FILE AND ${PROJECT_NAME}_ENABLE_KNOWN_EXTERNAL_REPOS_TYPE)

    MESSAGE("")
    MESSAGE("Reading the list of extra repositories from ${${PROJECT_NAME}_EXTRAREPOS_FILE}")
    MESSAGE("")

    INCLUDE(${${PROJECT_NAME}_EXTRAREPOS_FILE})

    TRIBITS_PROCESS_EXTRAREPOS_LISTS()


    IF (${PROJECT_NAME}_EXTRA_REPOSITORIES AND ${PROJECT_NAME}_EXTRA_REPOSITORIES_DEFAULT)
      TRIBITS_EXTRA_REPOSITORIES_ASSERT_SUBSET_AND_ORDER_WRT_FILE()
    ENDIF()


    IF (NOT UNITTEST_SKIP_FILTER_OR_ASSERT_EXTRA_REPOS)
      MESSAGE("")
      MESSAGE("Filtering and asserting existance (or ignore missing) extra repos ...")
      MESSAGE("")
      TRIBITS_FILTER_OR_ASSERT_EXTRA_REPOS()
    ELSE()
      SET(${PROJECT_NAME}_EXTRA_REPOSITORIES ${${PROJECT_NAME}_EXTRA_REPOSITORIES_DEFAULT})
    ENDIF()

  ENDIF()

ENDMACRO()


FUNCTION(TRIBITS_GET_EXTRAREPO_BASE_NAME  EXTRAREPO_NAME EXTRAREPO_NAME_OUT)
  GET_FILENAME_COMPONENT(EXTRAREPO_NAME "${EXTRAREPO_NAME}" NAME)
  SET(${EXTRAREPO_NAME_OUT} "${EXTRAREPO_NAME}" PARENT_SCOPE)
ENDFUNCTION()
