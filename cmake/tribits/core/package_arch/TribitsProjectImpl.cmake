



SET(CMAKE_MODULE_PATH
   ${CMAKE_CURRENT_SOURCE_DIR}
   ${CMAKE_CURRENT_SOURCE_DIR}/cmake
   ${${PROJECT_NAME}_TRIBITS_DIR}/core/utils
   ${${PROJECT_NAME}_TRIBITS_DIR}/core/package_arch
   ${${PROJECT_NAME}_TRIBITS_DIR}/core/config_tests
   ${${PROJECT_NAME}_TRIBITS_DIR}/core/modules
   ${${PROJECT_NAME}_TRIBITS_DIR}/core/installation
   )

IF (${PROJECT_NAME}_VERBOSE_CONFIGURE)
  MESSAGE("CMAKE_MODULE_PATH='${CMAKE_MODULE_PATH}'")
ENDIF()

INCLUDE(TribitsConstants)

CMAKE_MINIMUM_REQUIRED(VERSION ${TRIBITS_CMAKE_MINIMUM_REQUIRED} FATAL_ERROR)

INCLUDE(TribitsIncludeDirectories)
INCLUDE(TribitsGlobalMacros)
INCLUDE(TribitsConfigureCTestCustom)

INCLUDE(AdvancedSet)
INCLUDE(AdvancedOption)
INCLUDE(TimingUtils)
INCLUDE(SetDefault)



MACRO(TRIBITS_PROJECT_IMPL)


  MESSAGE("")
  MESSAGE("Configuring ${PROJECT_NAME} build directory")
  MESSAGE("")

  TRIBITS_ASSERT_AND_SETUP_PROJECT_AND_STATIC_SYSTEM_VARS()

  TRIBITS_READ_IN_OPTIONS_FROM_FILE()

  TRIBITS_SETUP_BASIC_SYSTEM_VARS()
  TRIBITS_FIND_PYTHON_INTERP()

  TRIBITS_PROJECT_READ_VERSION_FILE(${PROJECT_SOURCE_DIR})

  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})


  MESSAGE("")
  MESSAGE("Setting up major user options ...")
  MESSAGE("")

  TRIBITS_DEFINE_GLOBAL_OPTIONS_AND_DEFINE_EXTRA_REPOS()

  IF (${PROJECT_NAME}_ENABLE_CONFIGURE_TIMING)
    TIMER_GET_RAW_SECONDS(GLOBAL_TIME_START_SECONDS)
  ENDIF()

  TRIBITS_READ_IN_NATIVE_REPOSITORIES()

  TRIBITS_COMBINE_NATIVE_AND_EXTRA_REPOS()

  TRIBITS_PROCESS_EXTRA_REPOS_OPTIONS_FILES()

  INCLUDE(TribitsInstallationTestingMacros)
  TRIBITS_FIND_PROJECT_INSTALL()


  TRIBITS_GENERATE_REPO_VERSION_OUTPUT_AND_FILE_AND_INSTALL()

  TRIBITS_READ_PACKAGES_PROCESS_DEPENDENCIES_WRITE_XML()


  TRIBITS_ADJUST_AND_PRINT_PACKAGE_DEPENDENCIES()


  IF (${PROJECT_NAME}_SHORTCIRCUIT_AFTER_DEPENDENCY_HANDLING)
    MESSAGE("")
    MESSAGE("Shortcircuiting after dependency tracking ...")
    RETURN()
  ENDIF()


  MESSAGE("")
  MESSAGE("Probing the environment ...")
  MESSAGE("")

  IF (NOT ${PROJECT_NAME}_TRACE_DEPENDENCY_HANDLING_ONLY)
    TRIBITS_SETUP_ENV()
  ELSE()
    MESSAGE("-- Skipping env setup due to"
      " ${PROJECT_NAME}_TRACE_DEPENDENCY_HANDLING_ONLY=ON")
  ENDIF()


  TRIBITS_SETUP_INSTALLATION_PATHS()


  MESSAGE("")
  MESSAGE("Getting information for all enabled TPLs ...")
  MESSAGE("")

  TRIBITS_PROCESS_ENABLED_TPLS()


  MESSAGE("")
  MESSAGE("Setting up testing support ...")
  MESSAGE("")

  IF (NOT ${PROJECT_NAME}_TRACE_DEPENDENCY_HANDLING_ONLY)
    TRIBITS_INCLUDE_CTEST_SUPPORT()
  ELSE()
    MESSAGE("-- Skipping testing support setup due to"
      " ${PROJECT_NAME}_TRACE_DEPENDENCY_HANDLING_ONLY=ON")
  ENDIF()


  SET(TRIBITS_ADD_DASHBOARD_TARGET_MODULE
    ${${PROJECT_NAME}_TRIBITS_DIR}/${TRIBITS_CTEST_DRIVER_DIR}/TribitsAddDashboardTarget.cmake
    )
  IF (
    EXISTS ${TRIBITS_ADD_DASHBOARD_TARGET_MODULE}
    AND
    NOT ${PROJECT_NAME}_TRACE_DEPENDENCY_HANDLING_ONLY
    )
    INCLUDE(${TRIBITS_ADD_DASHBOARD_TARGET_MODULE})
    TRIBITS_ADD_DASHBOARD_TARGET()
  ENDIF()


  MESSAGE("")
  MESSAGE("Configuring individual enabled ${PROJECT_NAME} packages ...")
  MESSAGE("")

  IF (NOT ${PROJECT_NAME}_TRACE_DEPENDENCY_HANDLING_ONLY)
    TRIBITS_REPOSITORY_CONFIGURE_ALL_VERSION_HEADER_FILES(
      ${${PROJECT_NAME}_ALL_REPOSITORIES})
  ENDIF()

  TRIBITS_CONFIGURE_ENABLED_PACKAGES()


  IF (${PROJECT_NAME}_ENABLE_CPACK_PACKAGING)
    MESSAGE("")
    MESSAGE("Set up for creating a distribution ...")
    MESSAGE("")
    IF (NOT ${PROJECT_NAME}_TRACE_DEPENDENCY_HANDLING_ONLY)
      TRIBITS_SETUP_PACKAGING_AND_DISTRIBUTION()
    ELSE()
      MESSAGE("-- Skipping distribution setup due to"
        " ${PROJECT_NAME}_TRACE_DEPENDENCY_HANDLING_ONLY=ON")
    ENDIF()
  ELSE()
    MESSAGE("")
    MESSAGE("Skipping setup for distribution because"
      " ${PROJECT_NAME}_ENABLE_CPACK_PACKAGING=OFF")
    MESSAGE("")
  ENDIF()


  IF (NOT ${PROJECT_NAME}_TRACE_DEPENDENCY_HANDLING_ONLY)
    TRIBITS_SETUP_FOR_INSTALLATION()
  ENDIF()


  MESSAGE("")
  MESSAGE("Finished configuring ${PROJECT_NAME}!")
  MESSAGE("")
  IF (${PROJECT_NAME}_ENABLE_CONFIGURE_TIMING)
    TIMER_GET_RAW_SECONDS(GLOBAL_TIME_STOP_SECONDS)
    TIMER_PRINT_REL_TIME(${GLOBAL_TIME_START_SECONDS}  ${GLOBAL_TIME_STOP_SECONDS}
      "Total time to configure ${PROJECT_NAME}")
  ENDIF()

ENDMACRO()


MACRO(TRIBITS_PROJECT_ENABLE_ALL)
  SET(${PROJECT_NAME}_ENABLE_ALL_PACKAGES ON CACHE BOOL "Enable all by default" )
  TRIBITS_PROJECT_IMPL(${ARGN})
ENDMACRO()
